// Generated by CoffeeScript 1.4.0
(function() {

  Crafty.c("TiledLevel", {
    makeTiles: function(ts, drawType) {
      var components, i, posx, posy, sMap, sName, tHeight, tName, tNum, tWidth, tsHeight, tsImage, tsProperties, tsWidth, xCount, yCount, _i, _ref;
      tsImage = ts.image, tNum = ts.firstgid, tsWidth = ts.imagewidth;
      tsHeight = ts.imageheight, tWidth = ts.tilewidth, tHeight = ts.tileheight;
      tsProperties = ts.tileproperties;
      tsIsometric  = ts.isometric;
      xCount = tsWidth / tWidth | 0;
      yCount = tsHeight / tHeight | 0;
      sMap = {};
      for (i = _i = 0, _ref = yCount * xCount; _i < _ref; i = _i += 1) {
        posx = i % xCount;
        posy = i / xCount | 0;
        sName = "tileSprite" + tNum;
        tName = "tile" + tNum;
        sMap[sName] = [posx, posy];
        components = "2D, " + drawType + ", " + sName + ", MapTile";
        if (tsProperties) {
          if (tsProperties[tNum - 1]) {
            if (tsProperties[tNum - 1]["components"]) {
              components += ", " + tsProperties[tNum - 1]["components"];
            }
          }
        }
        Crafty.c(tName, {
          comp: components,
          init: function() {
            this.addComponent(this.comp);
            return this;
          }
        });
        tNum++;
      }
      Crafty.sprite(tWidth, tHeight, tsImage, sMap);
      return null;
    },
    makeLayer: function(layer, isometric) {
      var i, lData, lHeight, lWidth, tDatum, tile, _i, _len, row, tileWidth, tileHeight;
      lData = layer.data, lWidth = layer.width, lHeight = layer.height;
      for (i = _i = 0, _len = lData.length; _i < _len; i = ++_i) {
        tDatum = lData[i];
        if (tDatum) {
          tile = Crafty.e("tile" + tDatum);
          row  = (i / lWidth | 0);
          if(isometric == true) {
            tileWidth  = (tile.w / 2);
            tileHeight = (tile.h / 2);
          }else {
            tileWidth  = tile.w;
            tileHeight = tile.h;
          }
          
          tile.x = ((i % lWidth) * tileWidth) - (row * tileWidth);
          tile.y = (i / lWidth | 0) * tileHeight;
          if(isometric == true) {
            tile.y += ((i % lWidth | 0) * tileHeight);
          }
        }
      }
      return null;
    },
    tiledLevel: function(levelURL, drawType, callback) {
      var _this = this;
      _this.callback = callback;
      $.ajax({
        type: 'GET',
        url: levelURL,
        dataType: 'json',
        data: {},
        async: false,
        success: function(level) {
          var lLayers, ts, tsImages, tss, isometric;
          lLayers = level.layers, tss = level.tilesets;
          drawType = drawType != null ? drawType : "Canvas";
          isometric = level.orientation === "isometric";
          tsImages = (function() {
            var _i, _len, _results;
            _results = [];
            for (_i = 0, _len = tss.length; _i < _len; _i++) {
              ts = tss[_i];
              _results.push(ts.image);
            }
            return _results;
          })();
          Crafty.load(tsImages, function() {
            var layer, _i, _j, _len, _len1;
            for (_i = 0, _len = tss.length; _i < _len; _i++) {
              ts = tss[_i];
              _this.makeTiles(ts, drawType);
            }
            for (_j = 0, _len1 = lLayers.length; _j < _len1; _j++) {
              layer = lLayers[_j];
              if(_j == 1) _this.callback();
              
              _this.makeLayer(layer, isometric);
            }
            _this.trigger("TiledLevelLoaded", _this);
            return null;
          });
          return null;
        }
      });
      return this;
    },
    init: function() {
      return this;
    }
  });

}).call(this);